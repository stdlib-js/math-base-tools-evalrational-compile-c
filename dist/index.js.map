{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar readFile = require( '@stdlib/fs-read-file' ).sync;\nvar replace = require( '@stdlib/string-replace' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar uppercase = require( '@stdlib/string-base-uppercase' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// VARIABLES //\n\nvar opts = {\n\t'encoding': 'utf8'\n};\nvar dir = join( __dirname, 'templates' );\n\n// Templates:\nvar COEFFICIENT_RATIO_TEMPLATE = readFile( join( dir, 'coefficient_ratio.c.txt' ), opts ); // eslint-disable-line id-length\nvar EVALRATIONAL_TEMPLATE = readFile( join( dir, 'evalrational.c.txt' ), opts );\nvar LOOP_TEMPLATE = readFile( join( dir, 'loop.c.txt' ), opts );\nvar NAN_TEMPLATE = readFile( join( dir, 'nan.c.txt' ), opts );\n\n\n// FUNCTIONS //\n\n/**\n* Serializes a single value to a string.\n*\n* @private\n* @param {number} x - value to serialize\n* @returns {string} serialized value\n*/\nfunction value2string( x ) {\n\tvar str;\n\tif ( x === PINF ) {\n\t\treturn '1.0{{dtype_suffix}} / 0.0{{dtype_suffix}}';\n\t}\n\tif ( x === NINF ) {\n\t\treturn '-1.0{{dtype_suffix}} / 0.0{{dtype_suffix}}';\n\t}\n\tstr = x.toString();\n\tif ( isInteger( x ) ) {\n\t\tstr += '.0';\n\t}\n\tstr += '{{dtype_suffix}}';\n\treturn str;\n}\n\n/**\n* Serializes an array of numbers to an indented newline separated list.\n*\n* @private\n* @param {NumericArray} x - array of numbers\n* @returns {string} serialized value\n*/\nfunction array2list( x ) {\n\tvar str;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\tn = x.length;\n\tm = n - 1;\n\tstr = '';\n\tfor ( i = 0; i < n; i++ ) {\n\t\tstr += '\\t' + x[ i ].toString();\n\t\tif ( isInteger( x[ i ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t\tstr += '{{dtype_suffix}}';\n\t\tif ( i < m ) {\n\t\t\tstr += ',\\n';\n\t\t}\n\t}\n\treturn str;\n}\n\n/**\n* Serializes an array of coefficients to a string implementing Horner's method.\n*\n* @private\n* @param {NumericArray} x - coefficients sorted in ascending degree\n* @returns {string} output string\n*/\nfunction hornerAscending( x ) {\n\tvar str;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\tn = x.length;\n\tm = n - 1;\n\tstr = x[ 0 ].toString();\n\tif ( isInteger( x[ 0 ] ) ) {\n\t\tstr += '.0';\n\t}\n\tstr += '{{dtype_suffix}}';\n\tfor ( i = 1; i < n; i++ ) {\n\t\tstr += ' + (x * ';\n\t\tif ( i < m ) {\n\t\t\tstr += '(';\n\t\t}\n\t\tstr += x[ i ].toString();\n\t\tif ( isInteger( x[ i ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t\tstr += '{{dtype_suffix}}';\n\t}\n\t// Close all the parentheses...\n\tfor ( i = 0; i < (2*m)-1; i++ ) {\n\t\tstr += ')';\n\t}\n\treturn str;\n}\n\n/**\n* Serializes an array of coefficients to a string implementing Horner's method.\n*\n* @private\n* @param {NumericArray} x - coefficients sorted in descending degree\n* @returns {string} output string\n*/\nfunction hornerDescending( x ) {\n\tvar str;\n\tvar m;\n\tvar i;\n\n\tm = x.length - 1;\n\tstr = x[ m ].toString();\n\tif ( isInteger( x[ m ] ) ) {\n\t\tstr += '.0';\n\t}\n\tstr += '{{dtype_suffix}}';\n\tfor ( i = m-1; i >= 0; i-- ) {\n\t\tstr += ' + (x * ';\n\t\tif ( i > 0 ) {\n\t\t\tstr += '(';\n\t\t}\n\t\tstr += x[ i ].toString();\n\t\tif ( isInteger( x[ i ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t\tstr += '{{dtype_suffix}}';\n\t}\n\t// Close all the parentheses...\n\tfor ( i = 0; i < (2*m)-1; i++ ) {\n\t\tstr += ')';\n\t}\n\treturn str;\n}\n\n\n// MAIN //\n\n/**\n* Compiles a C function string for evaluating a rational function.\n*\n* @param {NumericArray} P - numerator polynomial coefficients sorted in ascending degree\n* @param {NumericArray} Q - denominator polynomial coefficients sorted in ascending degree\n* @param {Options} [options] - function options\n* @param {string} [options.dtype='double'] - input value floating-point data type\n* @param {string} [options.name='evalrational'] - function name\n* @returns {string} module string exporting a function for evaluating a rational function\n*\n* @example\n* var P = [ -6.0, -5.0 ];\n* var Q = [ 3.0, 0.5 ];\n*\n* var str = compile( P, Q );\n* // returns <string>\n*/\nfunction compile( P, Q, options ) {\n\tvar opts;\n\tvar str;\n\tvar n;\n\n\topts = {\n\t\t'dtype': 'double',\n\t\t'name': 'evalrational',\n\t\t'suffix': ''\n\t};\n\tif ( arguments.length > 2 ) {\n\t\topts.dtype = options.dtype || opts.dtype;\n\t\topts.name = options.name || opts.name;\n\t}\n\tif ( opts.dtype === 'float' ) {\n\t\topts.suffix = 'f';\n\t}\n\tn = P.length;\n\n\t// If no coefficients, the function always returns NaN...\n\tif ( n === 0 ) {\n\t\tstr = replace( NAN_TEMPLATE, '{{dtype}}', opts.dtype );\n\t\tstr = replace( str, '{{dtype_suffix}}', opts.suffix );\n\t\treturn replace( str, '{{fname}}', opts.name );\n\t}\n\t// If P and Q have different lengths, the function always returns NaN...\n\tif ( n !== Q.length ) {\n\t\tstr = replace( NAN_TEMPLATE, '{{dtype}}', opts.dtype );\n\t\tstr = replace( str, '{{dtype_suffix}}', opts.suffix );\n\t\treturn replace( str, '{{fname}}', opts.name );\n\t}\n\t// If P and Q only have one coefficient, the function always returns the ratio of those coefficients...\n\tif ( n === 1 ) {\n\t\tstr = replace( COEFFICIENT_RATIO_TEMPLATE, '{{ratio}}', value2string( P[0] / Q[0] ) );\n\t\tstr = replace( str, '{{dtype}}', opts.dtype );\n\t\tstr = replace( str, '{{dtype_suffix}}', opts.suffix );\n\t\treturn replace( str, '{{fname}}', opts.name );\n\t}\n\t// Avoid exceeding the maximum stack size on V8 by using a simple loop :(. Note that the choice of `500` was empirically determined...\n\tif ( n > 500 ) {\n\t\tstr = replace( LOOP_TEMPLATE, '{{P}}', array2list( P ) );\n\t\tstr = replace( str, '{{Q}}', array2list( Q ) );\n\t\tstr = replace( str, '{{ratio}}', value2string( P[0] / Q[0] ) );\n\t\tstr = replace( str, '{{num_coefficients}}', n.toString() );\n\t\tstr = replace( str, '{{dtype}}', opts.dtype );\n\t\tstr = replace( str, '{{dtype_suffix}}', opts.suffix );\n\t\tstr = replace( str, '{{fname}}', opts.name );\n\t\treturn replace( str, '{{FNAME}}', uppercase( opts.name ) );\n\t}\n\t// If more than one coefficient, apply Horner's method...\n\tstr = replace( EVALRATIONAL_TEMPLATE, '{{P_ASCENDING}}', hornerAscending( P ) );\n\tstr = replace( str, '{{Q_ASCENDING}}', hornerAscending( Q ) );\n\tstr = replace( str, '{{P_DESCENDING}}', hornerDescending( P ) );\n\tstr = replace( str, '{{Q_DESCENDING}}', hornerDescending( Q ) );\n\tstr = replace( str, '{{ratio}}', value2string( P[0] / Q[0] ) );\n\tstr = replace( str, '{{dtype}}', opts.dtype );\n\tstr = replace( str, '{{dtype_suffix}}', opts.suffix );\n\treturn replace( str, '{{fname}}', opts.name );\n}\n\n\n// EXPORTS //\n\nmodule.exports = compile;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compile a C function for evaluating a rational function.\n*\n* @module @stdlib/math-base-tools-evalrational-compile-c\n*\n* @example\n* var compile = require( '@stdlib/math-base-tools-evalrational-compile-c' );\n*\n* var P = [ -6.0, -5.0 ];\n* var Q = [ 3.0, 0.5 ];\n*\n* var str = compile( P, Q ); // ( -6*6^0 - 5*6^1 ) / ( 3*6^0 + 0.5*6^1 )\n* // returns <string>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "join", "readFile", "replace", "isInteger", "uppercase", "PINF", "NINF", "opts", "dir", "COEFFICIENT_RATIO_TEMPLATE", "EVALRATIONAL_TEMPLATE", "LOOP_TEMPLATE", "NAN_TEMPLATE", "value2string", "x", "str", "array2list", "m", "i", "hornerAscending", "hornerDescending", "compile", "P", "Q", "options", "n", "main"]
}
